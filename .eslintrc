{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "react",
    "tailwindcss"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:astro/recommended",
    "plugin:prettier/recommended"
  ],
  "rules": {
    "prettier/prettier": [
      "error",
      {
        "singleQuote": true,
        "endOfLine": "auto"
      }
    ]
  },
  "overrides": [ 
    {
      "files":[".js", "**/*.js"],
      "env": {
        "node": true
      }
    },
    { // Configuration for TypeScript files
      "files": ["**/*.ts", "**/*.tsx", "**/*.d.ts"],
      "plugins": [
        "@typescript-eslint",
        "react",
        "tailwindcss"
      ],
      "extends": [
        "plugin:tailwindcss/recommended",
        "plugin:prettier/recommended"
      ],
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        "prettier/prettier": [
          "error",
          {
            "singleQuote": true,
            "endOfLine": "auto"
          }
        ],
        // "import/extensions": ["warn", "always"], // Avoid missing file extension errors when using '@/' alias
        // "ignorePackages": 1,
        // "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        // "react/require-default-props": "off", // Allow non-defined react props as undefined
        // "react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-type-imports": "error", // Ensure `import type` is used when it's necessary
        // "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        "tailwindcss/classnames-order": [
          "warn",
          {
            "officialSorting": true
          }
        ] // Follow the same ordering as the official plugin `prettier-plugin-tailwindcss`
        // "simple-import-sort/imports": "error", // Import configuration for `eslint-plugin-simple-import-sort`
        // "simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
        // "@typescript-eslint/no-unused-vars": "off",
        // "unused-imports/no-unused-imports": "error",
        // "unused-imports/no-unused-vars": [
        //   "error",
        //   {
        //     "argsIgnorePattern": "^_"
        //   }
        // ]
      }
    },
    { // Define the configuration for `.astro` file.
      
      "files": ["**/*.astro", "*.astro"],
      // Allows Astro components to be parsed.
      "parser": "astro-eslint-parser",
      // Parse the script in `.astro` as TypeScript by adding the following configuration.
      // It's the setting you need when using TypeScript.
      "parserOptions": {
        "parser": "@typescript-eslint/parser",
        "extraFileExtensions": [".astro"]
      },
      "rules": {
        // override/add rules settings here, such as:
        "astro/no-conflict-set-directives": "error",
        "astro/no-unused-define-vars-in-style": "error",
        "astro/no-set-html-directive": "error"
      }
    },
    { // Configuration for `<script>` tag.
      // Script in `<script>` is assigned a virtual file name with the `.js` extension.
      "files": ["**/*.astro/*.js", "*.astro/*.js"],
      "env": {
        "browser": true,
        "es2020": true
      },
      "parserOptions": {
        "sourceType": "module"
      },
      "rules": {
        // override/add rules settings here, such as:
        // "no-unused-vars": "error"
        // If you are using "prettier/prettier" rule,
        // you don't need to format inside <script> as it will be formatted as a `.astro` file.
        "prettier/prettier": "off",
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-type-imports": "error", // Ensure `import type` is used when it's necessary
        // "tailwindcss/classnames-order": [
        //   "warn",
        //   {
        //     "officialSorting": true
        //   }
        // ], // Follow the same ordering as the official plugin `prettier-plugin-tailwindcss`
        // "simple-import-sort/imports": "error", // Import configuration for `eslint-plugin-simple-import-sort`
        // "simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
        "@typescript-eslint/no-unused-vars": "off"
        // "unused-imports/no-unused-imports": "error",
        // "unused-imports/no-unused-vars": [
        //   "error",
        //   {
        //     "argsIgnorePattern": "^_"
        //   }
        // ]
      }
    }
  ]
}